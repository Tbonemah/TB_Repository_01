# http://www.practicepython.org/exercise/2015/11/26/27-tic-tac-toe-draw.html
# 
# ________________________________________________________________________________________

def find_ttt_winner( mat ):    # check rows, columns, diagonals     returns one of  0,1,2 

	keep_looking = True
	sum1 = 0
	
	i = 0
	while ( keep_looking and i < 3 ) :
		if( ( mat[i][0] == mat[i][1]  and mat[i][0] == mat[i][2] ) and mat[i][0] > 0  ):
			sum1 = 3 * mat[i][0]
			keep_looking = False
		else:
			i += 1
	# print(" checked cols ")
	
	j = 0 
	while ( keep_looking and j < 3 ) :
		if( ( mat[0][j] == mat[1][j]  and mat[0][j] == mat[2][j] ) and mat[0][j] > 0  ):
			sum1 = 3 * mat[0][j]
			keep_looking = False
		else:
			j += 1
	# print(" checked rows ")
	
	if ( keep_looking and mat[1][1] != 0 ) :                           # no loop required here 
		if(  mat[0][0] == mat[1][1]  and   mat[1][1] == mat[2][2] ):
			sum1 = 3 * mat[1][1]
		elif(  mat[0][2] == mat[1][1]  and  mat[1][1] == mat[2][0] ) : 
			sum1 = 3 * mat[1][1]
	# print(" checked diagonals  ")	
	
	return( int( sum1 / 3 ) )

# ___________________________________________________________________________________________________________

def collision( mat, row, col ) :
		
	verdict = False
	if mat[row-1][col-1] != 0 :
		verdict = True 

	return( verdict ) 


def range_ok( row, col ) :
	
	verdict = False
	if( (  row >= 1 and row <= 3  )  and (   col >= 1 and col <= 3  ) ) : 
		verdict = True
		
	return( verdict ) 



def get_unique_and_validated_range_input( player_number, mat  ):
	
	validated  = False
	
	while not( validated ) :
		inp_str = input("  Please Enter co-ords of your next move : <row>,<col>  eg: 1,3  or 2,1 etc ")
		inp_str = inp_str.split(",")
		inp_list = [ int(i) for i in inp_str ]
	
		#print("inp_list = ", inp_list)
	
		validated  = ( range_ok( inp_list[0], inp_list[1] )  and  not( collision( mat, inp_list[0], inp_list[1] ) )  ) 
	
	return( inp_list ) 
	



def board_is_full( mat ):  # empty slots on board contain a 0 hence product of all entries is diagnostic
	
	product  = 1
	for i in range( 0,3 ):
		for j in range( 0,3 ):
			product = product * mat[i][j]
			
	return( product ) 




def update_board( mat , coords, player_number ): 

	newmat = mat
	newmat[ coords[0]-1 ][ coords[1]-1 ] = player_number
	
	return( newmat )




def display_board( mat ):
	
	print_horiz_line()
	for i in range( 0,3 ):
		print("|", mat[i][0], "|", mat[i][1], "|",mat[i][2], "|")
		print_horiz_line()


def print_horiz_line( ):
	print(" ---" * 3 )
	               

# ___________________________________________________________________________________________________________



if __name__ == "__main__":
	
	#repeat until board is full or somebody won
	#   get user n input - split it into a list : check for collision : update board if ok : ask again if not
	#   display board : check for winner
	#   flip user number 
	
	
	board  = [[0, 0, 0],	[0, 0, 0],	[0, 0, 0]]
	current_player = [ 1 , 2  ]
	
	coin = 0
	winner = False
	while( board_is_full(board) == False and winner == False ) :
	
		print("Current Player is: ", current_player[coin]  )
			
		user_input = get_unique_and_validated_range_input( current_player[coin] , board  )
		
		board = update_board( board , user_input, current_player[coin] )

		display_board( board )
		
		winner = find_ttt_winner( board )
		if ( winner == True ) :
			print("Congratulations player #", winner ) 		
			
		coin = not( coin )      # flip the binary coin to change player 
		
		
	print(" - Done - ")
